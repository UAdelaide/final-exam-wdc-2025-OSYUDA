-- task1.5
INSERT INTO Users (username, email, password_hash, role)
VALUES
  ('alice123', 'alice@example.com', 'hashed123', 'owner'),
  ('bobwalker', 'bob@example.com', 'hashed456', 'walker'),
  ('carol123', 'carol@example.com', 'hashed789', 'owner'),
  ('bowen', 'bowen@example.com', 'hashed122', 'walker'),
  ('pite', 'pite@example.com', 'hashed133', 'owner');

INSERT INTO Dogs (owner_id, name, size)
VALUES
  ((SELECT user_id FROM Users WHERE username = 'alice123'), 'Max', 'medium'),
  ((SELECT user_id FROM Users WHERE username = 'carol123'), 'Bella', 'small'),
  ((SELECT user_id FROM Users WHERE username = 'bowen'), 'Bagel', 'small'),
  ((SELECT user_id FROM Users WHERE username = 'bowen'), 'Flash', 'large'),
  ((SELECT user_id FROM Users WHERE username = 'pite'), 'Cake', 'medium');

INSERT INTO WalkRequests (dog_id, requested_time, duration_minutes, location, status)
VALUES
  ((SELECT dog_id FROM Dogs WHERE name = 'Max'), '2025-06-10 08:00:00', 30, 'Parklands', 'open'),
  ((SELECT dog_id FROM Dogs WHERE name = 'Bella'), '2025-06-10 09:30:00', 45, 'Beachside Ave', 'accepted'),
  ((SELECT dog_id FROM Dogs WHERE name = 'Bagel'), '2025-06-11 11:15:00', 20, 'Bowen St', 'cancelled'),
  ((SELECT dog_id FROM Dogs WHERE name = 'Flash'), '2025-06-11 14:00:00', 60, 'District Park', 'completed'),
  ((SELECT dog_id FROM Dogs WHERE name = 'Cake'), '2025-06-12 15:30:00', 35, 'Dog Park', '');



--1.6
app.get('/api/dogs', async (req, res) => {
  try {
    const [rows] = await db.query(`
      SELECT
        Dogs.name AS dog_name,
        Dogs.size,
        Users.username AS owner_name
      FROM Dogs
      JOIN Users ON Dogs.owner_id = Users.user_id
    `);
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: 'Unable to fetch dogs data from database' });
  }
});

--1.7
app.get('/api/walkrequests/open', async (req, res) => {
  try {
    const [rows] = await db.query(`
      SELECT
        WalkRequests.request_id,
        Dogs.name AS dog_name,
        WalkRequests.requested_time,
        WalkRequests.duration_minutes,
        WalkRequests.location,
        Users.username AS owner_username
      FROM WalkRequests
      JOIN Dogs ON WalkRequests.dog_id = Dogs.dog_id
      JOIN Users ON Dogs.owner_id = Users.user_id
      WHERE WalkRequests.status = 'open'
    `);
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch open walk requests' });
  }
});